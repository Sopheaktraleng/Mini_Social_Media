"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var RedisCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCoreModule = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const ioredis_1 = __importDefault(require("ioredis"));
const core_1 = require("@nestjs/core");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
let RedisCoreModule = RedisCoreModule_1 = class RedisCoreModule {
    constructor(options, moduleRef) {
        this.options = options;
        this.moduleRef = moduleRef;
    }
    async onApplicationShutdown() {
        const connection = this.moduleRef.get(utils_1.getRedisToken(this.options.connectionName));
        if (connection) {
            await connection.disconnect();
        }
    }
    static forRoot(options = {}) {
        const redisModuleOptions = {
            provide: constants_1.REDIS_MODULE_OPTIONS,
            useValue: options,
        };
        const connectionProvider = {
            provide: utils_1.getRedisToken(options.connectionName),
            useFactory: async () => await this.createConnectionFactory(options),
        };
        return {
            module: RedisCoreModule_1,
            providers: [connectionProvider, redisModuleOptions],
            exports: [connectionProvider],
        };
    }
    static forRootAsync(options) {
        const connectionProvider = {
            provide: utils_1.getRedisToken(options.connectionName),
            useFactory: async (redisOptions) => {
                if (options.connectionName) {
                    return await this.createConnectionFactory(Object.assign(Object.assign({}, redisOptions), { connectionName: options.connectionName }));
                }
                return await this.createConnectionFactory(redisOptions);
            },
            inject: [constants_1.REDIS_MODULE_OPTIONS],
        };
        const asyncProviders = this.createAsyncProviders(options);
        return {
            module: RedisCoreModule_1,
            imports: options.imports || [],
            providers: [
                ...asyncProviders,
                connectionProvider,
            ],
            exports: [connectionProvider],
        };
    }
    static createAsyncProviders(options) {
        if (options.useExisting || options.useFactory) {
            return [this.createAsyncOptionsProvider(options)];
        }
        const useClass = options.useClass;
        return [
            this.createAsyncOptionsProvider(options),
            {
                provide: useClass,
                useClass,
            },
        ];
    }
    static createAsyncOptionsProvider(options) {
        if (options.useFactory) {
            return {
                provide: constants_1.REDIS_MODULE_OPTIONS,
                useFactory: options.useFactory,
                inject: options.inject || [],
            };
        }
        return {
            provide: constants_1.REDIS_MODULE_OPTIONS,
            useFactory: async (optionsFactory) => await optionsFactory.createRedisOptions(options.connectionName),
            inject: [(options.useClass || options.useExisting)],
        };
    }
    static async createConnectionFactory(options) {
        return rxjs_1.defer(() => new Promise((resolve, reject) => {
            let redis;
            if (typeof options.url === 'string') {
                redis = new ioredis_1.default(options.url, options.ioredis);
            }
            else {
                redis = new ioredis_1.default(options.ioredis);
            }
            redis.on('connect', () => {
                resolve(redis);
            });
            redis.on('error', (error) => {
                reject(error);
            });
        }))
            .pipe(utils_1.handleRetry(options.retryAttempts, options.retryDelay))
            .toPromise();
    }
};
RedisCoreModule = RedisCoreModule_1 = __decorate([
    common_1.Global(),
    common_1.Module({}),
    __param(0, common_1.Inject(constants_1.REDIS_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object, core_1.ModuleRef])
], RedisCoreModule);
exports.RedisCoreModule = RedisCoreModule;
